eval 
    \x:int.x $ <- 5 ; ,
eval 
    \x:int.x $ <- (5) ; ,
eval 
    \y:(int->int). y $ <- \x:int. x $ ; ,
eval 
    \y:int. \z:int. y + z $ $ <- 11 <- 10 ; ,
eval 
    \y:(int->int). \z:int.  y <- z $ $ <- \x:int. x $ <- 18 ; ,
eval 5 + 6 ; ,
eval 5 - 6 ; ,
eval 5 * 6 ; ,
eval 5 / 6 ; ,
eval 5 + (6 * 7) ; ,
eval 5 > (6 + 7) ; ,
eval 5 <= (6 + 7) ; ,
eval 5 == 5 ; ,
eval 
    if true then 5 else 6 fi ; ,
eval 
    if false then 5 else (5 + (6 * 7)) fi ; ,
eval 
    if true then (5 / 9) else 6 fi ; ,
eval 
    if 3 > 5 then 5 else 6 fi ; ,
eval 
    if (5 < 3) then 5 else 6 fi ; ,
eval 
    if 4 >= 4 then 5 else 6 fi ; ,
eval 
    {a=1, b="hey", c=true} ; ,
eval 
    {a=1, b="hey", c=true}[b] ; ,
eval 
    \z:{a:int, b:string, c:bool}. z[a] $ <- {a=1, b="hey", c=true} ; ,
eval 
    <<one: {a: int, b: int}, two: {c: int, d:int} >> ; ,
eval 
    <<one = {a=1, b=2}>> as <<one: {a: int, b: int}, two: {c: int, d:int} >> sa  ; ,
eval 
    << one = {a= 1, b= 2} >> as <<one: {a: int, b: int}, two: {c: int, d:int} >> sa ; ,
eval 
    case << one = {a= 1, b= 2} >> as <<one: {a: int, b: int}, two: {c: int, d:int} >> sa of  { one = x => x[a] | two = y => y[c]}  ; ,
eval 
    case << one = {a= 1, b= 2} >> as <<one: {a: int, b: int}, two: {c: int, d:int} >> sa of  { one = x => 10 | two = y => 20} ; ,
eval 
    fix 
        \fct:int->int. 
            \x:int. 
                if x==0 
                    then 1 
                    else x * (fct <- (x-1)) 
                fi 
            $ 
        $ <- 5 ;